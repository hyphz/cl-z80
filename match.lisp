(in-package #:cl-z80)

(defun get-match-ids (pattern ids)
  (cond ((or (null pattern) (not (listp pattern)))
         ids)
        ((member (car pattern) '(:num :keyw :reg :rest))
         (get-match-ids (cddr pattern)
                        (cons (cadr pattern) ids)))
        (t
         (get-match-ids (car pattern)
                        (get-match-ids (cdr pattern) ids)))))

(defun match-inst (inst pattern out env)
  (macrolet ((match-guard (guard)
               `(let ((id (cadr pattern))
                      (val (car inst)))
                  (when (funcall ,guard val)
                    (match-inst (cdr inst) (cddr pattern) out
                                (acons id val env))))))
    (cond ((and (null pattern) (not (null inst)))
           nil)
          ((null pattern)
           (funcall out env))
          ((and (listp (car pattern)) (listp (car inst)))
           (let ((env (match-inst (car inst) (car pattern)
                                  (lambda (env) (cons t env))
                                  env)))
             (when (car env)
               (match-inst (cdr inst) (cdr pattern) out (cdr env)))))
          ((equal (car pattern) :rest)
           (let ((id (cadr pattern)))
             (match-inst '() '() out (acons id inst env))))
          ((equal (car pattern) :num)
           (match-guard (lambda (i) (or (numberp i)
                                   (and (keywordp i) (not (forbidden? i)))))))
          ((equal (car pattern) :keyw)
           (match-guard (lambda (i) (and (keywordp i) (not (forbidden? i))))))
          ((equal (car pattern) :reg)
           (match-guard (lambda (i) (and (keywordp i) (forbidden? i)))))
          ((equal (car inst) (car pattern))
           (match-inst (cdr inst) (cdr pattern) out env)))))
